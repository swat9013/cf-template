AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation template to create resources required to run tasks on an
  ECS cluster.
Mappings:
  VpcCidrs:
    vpc:
      cidr: 10.0.0.0/16
    pubsubnet1:
      cidr: 10.0.0.0/24
    pubsubnet2:
      cidr: 10.0.1.0/24
Parameters:
  EcsAmiId:
    Type: String
    Description: ECS EC2 AMI id
    Default: ''
  EcsInstanceType:
    Type: String
    Description: ECS EC2 instance type
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: >-
      Optional - Name of an existing EC2 KeyPair to enable SSH access to the ECS
      instances
    Default: ''
  VpcId:
    Type: String
    Description: Optional - VPC Id of existing VPC. Leave blank to have a new VPC created
    Default: ''
    AllowedPattern: '^(?:vpc-[0-9a-f]{8}|)$'
    ConstraintDescription: VPC Id must begin with 'vpc-' or leave blank to have a new VPC created
  SubnetIds:
    Type: CommaDelimitedList
    Description: >-
      Optional - Comma separated list of two (2) existing VPC Subnet Ids where
      ECS instances will run.  Required if setting VpcId.
    Default: ''
  AsgMaxSize:
    Type: Number
    Description: Maximum size and initial Desired Capacity of ECS Auto Scaling Group
    Default: '1'
  SecurityGroupIds:
    Type: CommaDelimitedList
    Description: >-
      Optional - Existing security group to associate the container instances.
      Creates one by default.
    Default: ''
  SourceCidr:
    Type: String
    Description: Optional - CIDR/IP range for EcsPort - defaults to 0.0.0.0/0
    Default: 0.0.0.0/0
  EcsPort:
    Type: String
    Description: >-
      Optional - Security Group port to open on ECS instances - defaults to port
      80
    Default: '80'
  AssociatePublicIpAddress:
    Type: String
    Description: >-
      Optional - Automatically assign public IP addresses to new instances in
      this VPC.
    Default: 'true'
  EcsClusterName:
    Type: String
    Description: ECS Cluster Name
    Default: default
Conditions:
  IsCNRegion: !Equals
    - !Ref 'AWS::Region'
    - cn-north-1
Resources:
  EcsInstancePolicy:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !If
                  - IsCNRegion
                  - ec2.amazonaws.com.cn
                  - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  EcsInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EcsInstancePolicy
  EcsInstanceLc:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !Ref EcsAmiId
      InstanceType: !Ref EcsInstanceType
      AssociatePublicIpAddress: !Ref AssociatePublicIpAddress
      IamInstanceProfile: !Ref EcsInstanceProfile
      KeyName: !Ref KeyName
      SecurityGroups: !Ref SecurityGroupIds
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - echo ECS_CLUSTER=
            - !Ref EcsClusterName
            - |2
               >> /etc/ecs/ecs.config
  EcsInstanceAsg:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref SubnetIds
      LaunchConfigurationName: !Ref EcsInstanceLc
      MinSize: '1'
      MaxSize: !Ref AsgMaxSize
      DesiredCapacity: !Ref AsgMaxSize
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - 'ECS Instance - '
              - !Ref 'AWS::StackName'
          PropagateAtLaunch: 'true'
  EcsCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Ref EcsClusterName

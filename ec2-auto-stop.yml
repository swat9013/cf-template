---
AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for auto stop EC2 instances
#
# Metadata
#
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: CloudWatch Events Configuration
      Parameters:
      - StopSchedule
    - Label:
        default: Lambda Configuration
      Parameters:
      - Ec2TagKey
      - Ec2TagValue
#
# Parameters
#
Parameters:
  StopSchedule:
    Description: Stop Datetime format cron
    Default: 0 15 ? * MON-FRI *
    Type: String
  Ec2TagKey:
    Description: EC2 tag key
    Default: ec2-state-scheduler
    Type: String
  Ec2TagValue:
    Description: EC2 tag value
    Default: "True"
    Type: String
#
# Resources
#
Resources:
  StateSchedulerExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LambdaExecPolicy
        PolicyDocument:
          Statement:
          - Sid: AccessToCWLog
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
          - Sid: AccessToInstance
            Effect: Allow
            Action:
            - ec2:DescribeInstances
            - ec2:StartInstances
            - ec2:StopInstances
            Resource: "*"
  StateSchedulerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import os
          import logging
          logger = logging.getLogger(__name__)
          logger.setLevel(logging.INFO)

          TAG_KEY = os.environ['TagKey']
          TAG_VALUE = os.environ['TagValue']

          def get_target_instances():
              ec2 = boto3.resource('ec2')
              filters = [{
                  'Name': 'tag:' + TAG_KEY,
                  'Values': [TAG_VALUE]
              }]
              return ec2.instances.filter(Filters=filters)

          def lambda_handler(event, context):
              logger.info('Started')

              instances = get_target_instances()
              logger.info("Target instances: \n%s" % str(
                  [(i.id, tag['Value']) for i in instances for tag in i.tags if tag.get('Key')=='Name']
              ))
              result = None

              if filter(lambda r: r.count('StartScheduledRule'), event.get('resources')):
                  logger.info('Start instances')
                  result = instances.start()
              elif filter(lambda r: r.count('StopScheduledRule'), event.get('resources')):
                  logger.info('Stop instances')
                  result = instances.stop()

              logger.info(result)
              logger.info('Complete')
      Environment:
        Variables:
          TagKey: !Ref Ec2TagKey
          TagValue: !Ref Ec2TagValue
      Description: Scheduled EC2 stop.
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt [ StateSchedulerExecRole, Arn ]
      Runtime: python2.7
      Timeout: 60
  StopScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: ScheduledRule for stop instance
      ScheduleExpression: !Sub cron(${StopSchedule})
      State: ENABLED
      Targets:
      - Arn: !GetAtt [ StateSchedulerFunction, Arn ]
        Id: StateSchedulerFunction
  PermissionForStopEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StateSchedulerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [ StopScheduledRule, Arn ]
